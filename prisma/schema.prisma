// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  reviews   Review[]

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float?
  imageUrl    String?
  sku         String?  @unique
  active      Boolean  @default(true)
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Review {
  id          String        @id @default(cuid())
  rating      Int           // 1-5 estrelas
  comment     String?
  productId   String
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  customerName String?      // Nome do cliente se não for usuário registrado
  customerEmail String?     // Email do cliente se não for usuário registrado
  verified    Boolean       @default(false) // Se a compra foi verificada
  helpful     Int           @default(0) // Quantas pessoas acharam útil
  media       ReviewMedia[]
  // Campos para integração com Shopify
  shopifyShop  String?      // Loja Shopify de origem
  shopifyProductId String?  // ID do produto no Shopify
  invitationToken String?   // Token do convite original
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("reviews")
}

model ReviewMedia {
  id       String    @id @default(cuid())
  reviewId String
  review   Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  type     MediaType // IMAGE ou VIDEO
  url      String
  filename String?
  size     Int?      // Tamanho em bytes
  createdAt DateTime @default(now())

  @@map("review_media")
}

enum MediaType {
  IMAGE
  VIDEO
}
